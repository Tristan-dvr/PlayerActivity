name: Publish to Thunderstore

on:
  push:
    branches:
      - published

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Extract project info
      id: project_info
      run: |
        # Find the main .csproj file
        CSPROJ_FILE=$(find . -name "*.csproj" -not -path "./bin/*" -not -path "./obj/*" | head -1)
        if [ -z "$CSPROJ_FILE" ]; then
          echo "ERROR: No .csproj file found"
          exit 1
        fi
        
        # Extract project name from .csproj file
        PROJECT_NAME=$(grep -o '<AssemblyName>[^<]*</AssemblyName>' "$CSPROJ_FILE" | sed 's/<AssemblyName>//;s/<\/AssemblyName>//')
        if [ -z "$PROJECT_NAME" ]; then
          # Fallback: use filename without extension
          PROJECT_NAME=$(basename "$CSPROJ_FILE" .csproj)
        fi
        
        # Find Plugin.cs file
        PLUGIN_FILE=$(find . -name "Plugin.cs" -not -path "./bin/*" -not -path "./obj/*" | head -1)
        if [ -z "$PLUGIN_FILE" ]; then
          echo "ERROR: No Plugin.cs file found"
          exit 1
        fi
        
        # Extract version from Plugin.cs
        VERSION=$(grep -o 'public const string Version = "[^"]*"' "$PLUGIN_FILE" | grep -o '"[^"]*"' | tr -d '"')
        if [ -z "$VERSION" ]; then
          echo "ERROR: Could not extract version from Plugin.cs"
          exit 1
        fi
        
        echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "csproj_file=$CSPROJ_FILE" >> $GITHUB_OUTPUT
        echo "plugin_file=$PLUGIN_FILE" >> $GITHUB_OUTPUT
        echo "Extracted project: $PROJECT_NAME, version: $VERSION"
        
    - name: Restore dependencies
      run: dotnet restore ${{ steps.project_info.outputs.csproj_file }}
      
    - name: Build Release
      run: dotnet build ${{ steps.project_info.outputs.csproj_file }} --configuration Release --no-restore
        
    - name: Update manifest.json with version
      run: |
        VERSION="${{ steps.project_info.outputs.version }}"
        # Use jq to update the version in manifest.json
        jq --arg version "$VERSION" '.version_number = $version' manifest.json > manifest_temp.json
        mv manifest_temp.json manifest.json
        echo "Updated manifest.json with version: $VERSION"
        
    - name: Create Thunderstore package
      run: |
        PROJECT_NAME="${{ steps.project_info.outputs.project_name }}"
        VERSION="${{ steps.project_info.outputs.version }}"
        
        # Create the zip package with files in root
        zip "${PROJECT_NAME}-${VERSION}.zip" \
          "bin/Release/${PROJECT_NAME}.dll" \
          manifest.json \
          README.md \
          CHANGELOG.md \
          icon.png
        
        echo "Created package: ${PROJECT_NAME}-${VERSION}.zip"
        
    - name: Upload package to Thunderstore
      uses: Thunderstore-io/thunderstore-publish-action@v1
      with:
        api_key: ${{ secrets.TS_SECRET }}
        package_path: ${{ steps.project_info.outputs.project_name }}-${{ steps.project_info.outputs.version }}.zip
        game: valheim
        
    - name: Cleanup
      run: |
        PROJECT_NAME="${{ steps.project_info.outputs.project_name }}"
        VERSION="${{ steps.project_info.outputs.version }}"
        rm -f "${PROJECT_NAME}-${VERSION}.zip"
